/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.0.M21
 * Generated at: 2017-05-19 04:05:35 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class writeBlog_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(" <!DOCTYPE HTML>\r\n");
      out.write(" <html>\r\n");
      out.write(" \r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <title>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${username}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("的博文编辑页</title>\r\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"CSS/button.css\">\r\n");
      out.write("<script type=\"text/javascript\" src=\"tinymce/js/tinymce/tinymce.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"tinymce/js/tinymce/jquery.tinymce.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"tinymce/js/tinymce/langs/zh_CN.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"jquery-3.2.1.js\"></script>\r\n");
      out.write("<script> \r\n");
      out.write("\r\n");
      out.write("     tinymce.init({\r\n");
      out.write("        selector:\"h1.editable#elm2\",       //elm2为ID                 可将selector值理解为css中class、ID等，以此使用tinymce中样式（比如编辑框内文本显示样式、工具栏样式）--个人理解，不保证正确\r\n");
      out.write("        inline:false,                       //为true时，编辑工具栏隐藏\r\n");
      out.write("        toolbar:\"undo redo\",\r\n");
      out.write("        height:50,\r\n");
      out.write("        menubar: false,\r\n");
      out.write("    });\r\n");
      out.write("    tinymce.init({\r\n");
      out.write("        selector:'textarea#elm1',          //<textarea>中为编辑区域\r\n");
      out.write("       theme: \"modern\",                  //主题\r\n");
      out.write("      language: \"zh_CN\",                //语言 ，可自行下载中文\r\n");
      out.write("    height: 300,\r\n");
      out.write("    plugins: [                             //插件，可自行根据现实内容删除\r\n");
      out.write("          \"advlist autolink lists charmap print preview hr anchor pagebreak spellchecker\",\r\n");
      out.write("         \"searchreplace wordcount visualblocks visualchars fullscreen insertdatetime  nonbreaking\",\r\n");
      out.write("         \"save contextmenu directionality emoticons paste textcolor\"\r\n");
      out.write("    ],\r\n");
      out.write("    upload_image_url:\"/images\",\r\n");
      out.write("    content_css: \"css/content.css\",      //引用的外部CSS样式，可删除\r\n");
      out.write("   toolbar: \"insertfile undo redo | styleselect fontselect fontsizeselect| bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | l      | print preview fullpage | forecolor backcolor\",                          //工具栏，可根据需求删除\r\n");
      out.write("    style_formats: [                        //初始时提供的默认格式\r\n");
      out.write("         {title: 'Bold text', inline: 'b'},\r\n");
      out.write("        {title: 'Red text', inline: 'span', styles: {color: '#ff0000'}},\r\n");
      out.write("        {title: 'Red header', block: 'h1', styles: {color: '#ff0000'}},\r\n");
      out.write("        {title: 'Example 1', inline: 'span', classes: 'example1'},\r\n");
      out.write("         {title: 'Example 2', inline: 'span', classes: 'example2'},\r\n");
      out.write("        {title: 'Table styles'},\r\n");
      out.write("       {title: 'Table row 1', selector: 'tr', classes: 'tablerow1'}\r\n");
      out.write("     ]\r\n");
      out.write("  }); \r\n");
      out.write(" </script>\r\n");
      out.write(" </head>\r\n");
      out.write("<body>\r\n");
      out.write("    <form action=\"publishblog\">\r\n");
      out.write("    标题：<input type=\"text\" id=\"elm2\" name=\"title\" placeholder=\"标题\"><br>\r\n");
      out.write("    博文分类：<select name=\"category\">\r\n");
      out.write("<option value=\".NET技术\">.NET技术</option>\r\n");
      out.write("<option value=\"编程语言\">编程语言</option>\r\n");
      out.write("<option value=\"Web前端开发\" selected>Web前端开发</option>\r\n");
      out.write("<option value=\"手机开发\">手机开发</option>\r\n");
      out.write("<option value=\"软件工程\">软件工程</option>\r\n");
      out.write("<option value=\"数据化技术\">数据化技术</option>\r\n");
      out.write("<option value=\"操作系统\">操作系统</option>\r\n");
      out.write("<option value=\"其他\">其他</option>\r\n");
      out.write("</select>\r\n");
      out.write("     <textarea maxlength=\"100000\" name=\"content\" id=\"elm1\"></textarea>\r\n");
      out.write("<input type=\"submit\" value=\"发表\">\r\n");
      out.write(" </form>\r\n");
      out.write(" </body>\r\n");
      out.write("\r\n");
      out.write(" </html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
